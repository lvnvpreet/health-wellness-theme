/**
 * Swiper 8.4.7
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * https://swiperjs.com
 *
 * This is a placeholder for Swiper library
 * For production, replace with actual Swiper library from:
 * https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Swiper = factory());
})(this, (function () { 'use strict';

    // Simplified Swiper placeholder for development
    function Swiper(container, options) {
        if (typeof container === 'string') {
            container = document.querySelector(container);
        }
        
        if (!container) {
            console.warn('Swiper container not found');
            return;
        }
        
        this.container = container;
        this.options = options || {};
        this.slides = container.querySelectorAll('.swiper-slide');
        this.activeIndex = 0;
        
        this.init();
    }
    
    Swiper.prototype = {
        init: function() {
            this.setupContainer();
            this.setupNavigation();
            this.setupPagination();
            this.setupAutoplay();
            this.bindEvents();
            
            // Trigger initialization callback
            if (this.options.on && this.options.on.init) {
                this.options.on.init.call(this);
            }
        },
        
        setupContainer: function() {
            this.container.classList.add('swiper-initialized');
            
            // Setup wrapper
            var wrapper = this.container.querySelector('.swiper-wrapper');
            if (wrapper) {
                wrapper.style.display = 'flex';
                wrapper.style.transition = 'transform 0.3s ease';
            }
            
            // Setup slides
            this.slides.forEach(function(slide, index) {
                slide.style.flexShrink = '0';
                slide.style.width = '100%';
                slide.dataset.swiperSlideIndex = index;
            });
        },
        
        setupNavigation: function() {
            var self = this;
            var navigation = this.options.navigation;
            
            if (navigation) {
                var nextEl = typeof navigation.nextEl === 'string' ? 
                    document.querySelector(navigation.nextEl) : navigation.nextEl;
                var prevEl = typeof navigation.prevEl === 'string' ? 
                    document.querySelector(navigation.prevEl) : navigation.prevEl;
                
                if (nextEl) {
                    nextEl.addEventListener('click', function() {
                        self.slideNext();
                    });
                }
                
                if (prevEl) {
                    prevEl.addEventListener('click', function() {
                        self.slidePrev();
                    });
                }
            }
        },
        
        setupPagination: function() {
            var pagination = this.options.pagination;
            if (pagination && pagination.el) {
                var paginationEl = typeof pagination.el === 'string' ? 
                    document.querySelector(pagination.el) : pagination.el;
                
                if (paginationEl && pagination.clickable) {
                    var self = this;
                    paginationEl.innerHTML = '';
                    
                    this.slides.forEach(function(slide, index) {
                        var bullet = document.createElement('span');
                        bullet.classList.add('swiper-pagination-bullet');
                        if (index === 0) bullet.classList.add('swiper-pagination-bullet-active');
                        
                        bullet.addEventListener('click', function() {
                            self.slideTo(index);
                        });
                        
                        paginationEl.appendChild(bullet);
                    });
                }
            }
        },
        
        setupAutoplay: function() {
            if (this.options.autoplay && this.options.autoplay.delay) {
                var self = this;
                this.autoplayTimer = setInterval(function() {
                    if (!self.options.autoplay.disableOnInteraction || !self.userInteracted) {
                        self.slideNext();
                    }
                }, this.options.autoplay.delay);
            }
        },
        
        bindEvents: function() {
            var self = this;
            
            // Track user interaction
            this.container.addEventListener('mouseenter', function() {
                self.userInteracted = true;
            });
            
            this.container.addEventListener('mouseleave', function() {
                self.userInteracted = false;
            });
        },
        
        slideTo: function(index) {
            this.activeIndex = index;
            this.updateSlides();
            this.updatePagination();
            
            if (this.options.on && this.options.on.slideChange) {
                this.options.on.slideChange.call(this);
            }
        },
        
        slideNext: function() {
            var nextIndex = this.activeIndex + 1;
            if (nextIndex >= this.slides.length) {
                nextIndex = this.options.loop ? 0 : this.slides.length - 1;
            }
            this.slideTo(nextIndex);
        },
        
        slidePrev: function() {
            var prevIndex = this.activeIndex - 1;
            if (prevIndex < 0) {
                prevIndex = this.options.loop ? this.slides.length - 1 : 0;
            }
            this.slideTo(prevIndex);
        },
        
        updateSlides: function() {
            var wrapper = this.container.querySelector('.swiper-wrapper');
            if (wrapper) {
                var translateX = -this.activeIndex * 100;
                wrapper.style.transform = 'translateX(' + translateX + '%)';
            }
            
            // Update slide classes
            this.slides.forEach(function(slide, index) {
                slide.classList.remove('swiper-slide-active', 'swiper-slide-prev', 'swiper-slide-next');
                if (index === this.activeIndex) {
                    slide.classList.add('swiper-slide-active');
                } else if (index === this.activeIndex - 1) {
                    slide.classList.add('swiper-slide-prev');
                } else if (index === this.activeIndex + 1) {
                    slide.classList.add('swiper-slide-next');
                }
            }.bind(this));
        },
        
        updatePagination: function() {
            var bullets = this.container.querySelectorAll('.swiper-pagination-bullet');
            bullets.forEach(function(bullet, index) {
                bullet.classList.toggle('swiper-pagination-bullet-active', index === this.activeIndex);
            }.bind(this));
        },
        
        destroy: function() {
            if (this.autoplayTimer) {
                clearInterval(this.autoplayTimer);
            }
            
            // Remove event listeners and clean up
            this.container.classList.remove('swiper-initialized');
        }
    };
    
    // Static methods and properties
    Swiper.use = function(modules) {
        // Module system placeholder
        return Swiper;
    };
    
    Swiper.version = '8.4.7';
    
    return Swiper;

}));

/* 
PRODUCTION NOTE: 
This is a simplified Swiper placeholder for development purposes.
For production use, replace this file with the official Swiper library:
Download from: https://swiperjs.com/get-started
CDN: https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js
*/
